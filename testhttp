#!/usr/bin/env python
import argparse
from urllib.parse import urlparse
import subprocess
import socket
import signal
import sys
import os


def signal_handler(sig, frame):
    global object_to_clean
    if object_to_clean is not None:
        object_to_clean.clean()
    sys.exit(0)


def find_free_port():
    helper_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    helper_socket.bind(('', 0))
    _, port = helper_socket.getsockname()
    helper_socket.close()
    return port


def create_config_file(port, target_host):
    config_file = open("stunnel_config", "w")
    config_file.write("foreground = yes\n"
                      "[service]\n"
                      "client = yes\n"
                      "accept = localhost:{}\n"
                      "connect = {}\n".format(port, target_host))

    config_file.close()
    return config_file.name


def wait_until_port_ready(port):
    while True:
        testing_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        port_status = testing_socket.connect_ex(("127.0.0.1", port))
        if port_status == 0:
            break

    testing_socket.close()


class Stunnel:
    def __init__(self, target_host, port):
        global object_to_clean
        self.config_file = create_config_file(port, target_host)
        self.log_file = open("subprocess_logs.txt", "w")
        self.process = subprocess.Popen(["stunnel", self.config_file],
                                        stdout=self.log_file, stderr=self.log_file)
        wait_until_port_ready(port)
        object_to_clean = self

    def clean(self):
        self.process.terminate()
        os.remove(self.config_file)
        os.remove(self.log_file.name)
        self.log_file.close()


def run_www_test(
        connection_address_and_port,
        cookie_file_name,
        http_tested_address):
    current_path = os.path.dirname(os.path.realpath(__file__))

    # TODO comment out !!!
    current_path = current_path + "/cmake-build-debug"

    testing_process = subprocess.Popen(
        [
            current_path +
            "/testhttp_raw",
            connection_address_and_port,
            cookie_file_name,
            http_tested_address])
    testing_process.wait()


def run_https(tested_url, cookie_file_name, http_tested_address):
    target_host = tested_url.netloc
    if tested_url.port is None:
        target_host += ":443"

    port = find_free_port()
    stunnel_instance = Stunnel(target_host, port)

    connection_address_and_port = "localhost:{}".format(port)
    run_www_test(
        connection_address_and_port,
        cookie_file_name,
        http_tested_address)
    stunnel_instance.clean()


def run_http(tested_url, cookie_file_name, http_tested_address):
    target_host = tested_url.netloc
    if tested_url.port is None:
        target_host += ":80"

    run_www_test(target_host, cookie_file_name, http_tested_address)


def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("cookie_file_name")
    parser.add_argument("http_tested_address")
    arguments = parser.parse_args()
    return arguments


def main():
    signal.signal(signal.SIGINT, signal_handler)

    arguments = parse_arguments()
    tested_url = urlparse(arguments.http_tested_address)

    if tested_url.scheme == "https":
        run_https(
            tested_url,
            arguments.cookie_file_name,
            arguments.http_tested_address)
    else:
        run_http(
            tested_url,
            arguments.cookie_file_name,
            arguments.http_tested_address)
    # If the prefix is neither "https" nor "http",
    # runhttp_raw will handle the error during its parsing.


object_to_clean = None
main()
